Тонкости перевода: Я не уверена, что перевела все правильно, поэтому на всякий случай: заданиями я называю ассигменты, а задачами проблемы. Также, везде, где есть _id(кроме как в методах внутри nbgrader_config.py) я имею в виду любое имя, соответствующее по смыслу названию(например assignment_id это просто какое-то задание, в реальности может называться как угодно, никаких постфиксов не нужно) 
1. Установка
Для установки nbgrader откройте терминал и введите команду:
pip install nbgrader
или:
conda install jupyter
conda install -c conda-forge nbgrader,
если вы использцете анаконду.
Для получения доступа к возможностям учителя, 
необходимо установить расширения:
jupyter nbextension install --sys-prefix --py nbgrader --overwrite
jupyter nbextension enable --sys-prefix --py nbgrader
jupyter serverextension enable --sys-prefix --py nbgrader
Первое расширение необходимо для создания заданий.
Для assignment list, formgrader, и validate необходимы оба расширения.
2. Создание курса
Есть два пути: создать свой курс с нуля или использовать шаблон
2.1 Шаблон
Команда
nbgrader quickstart course_id 
создаст курс с названием course_id и наполнением: 2 задания и 2 студента.
2.2 Создание своего курса
Создается папка с базой данных и файлом nbgrader_config.py(про них в 3.3)
!Полезная команда --help, объясняет почти все о лююбой команде, если дописать после команды!
3.Структура
3.1 Команды
Команды nbgrader строятся следующим образом:
{course_directory}/{nbgrader_step}/{student_id}/{assignment_id}/{notebook_id}.ipynb
course_directory -- корневая папка, в которой хранится все (информация о классе, заданиях и т.д.)
!Возможная проблема!
Обычно все неожиданные ошибки связаны с тем, что nbgrader ожидает что-то увидеть в корневой папке, и не этого там нет.
nbgrader_step -- команда (проверить, забрать, раздать задания и т.д.). Есть тонкости с тем, где запускать команды и где будет видно их результат. Далее подробнее.

*_id можно заменить звездочкой, если нужно выполнить команду для всех элементов.
3.2 Вид
Глобально есть две папки: корневая и обменная. Корневая папка содержит в себе информацию у курсе, учениках, заданиях. В ней хранятся решения преподавателя и к ней доступа у учеников нет. Вторая папка создана для обмена между учениками и преподавателем, в ней зранятся: а) Выложенные задания учителя без решений б)Решения студентов в)Фидбэки учителя и nbgrader на каждое задание каждого ученика. Подробнее в разделе 4.5. 
Также важно отметить, что создатели nbgrader предполагали, что студенты все-таки поставят его себе. "Студенческая" версия требует только анаконду и питон версии не ниже 3(раздел 7), и делает жизнь преподавателя НАМНОГО проще. Можно установить на почти любую версию ОП, но как показала практика, не на 32-битную. Основная проблема, с которой сталкивается преподаватель -- это безумные таймстемпы, без которых nbgrader не будет проверять задания и отсылать фидбэки. Пока я не нашла способа отключить их, поэтому, если ученики не ставят себе nbgrader, преподавателю придется таймстемпы "фальсифицировать".
3.3 Что есть в папке
gradebook.db --  База данных типа sQlite database, находится в {course_directory}/gradebook.db.
Внутрь нее лезть обычно необходимости нет, nbgrader все манипуляции выполняет сам. 
nbgrader_config.py -- также находится в корневой папке курса. Хранит всю информацию о курсе, связанную с базой данных(адрес обменной папки, информация об учениках и т.д)
Например, 
c.CourseDirectory.course_id = "course101" -- метод, задающий id курса(можно изменить)
4. Работа с nbgrader
Все, необходимое учителю, укладывается в схеме
Make assignment(+Добавить тесты) -- Generate -- Release -- Collect -- Grade -- Feedback
4.0 Formgrader
Великая вещь, позволяет работать не через командную строку, а прямо в Jupyter. Очень userfriendly, я пользовалась все время им, но на всякий случай в инструкции дублирую команды для командной строки.
Формально вcе действия абсолютно одинаковые, поэтому местоположение всех папок я буду описывать в разделе командной строки(так вроде логичнее).
Для использования formgrader, необходимо запустить джупитер ноутбук и нажать кнопку formgrader в ряду Files -- Running -- Clusters -- Formgrader
!Возможная проблема!
Если вы видите табличку "The course id has not been set in nbgrader_config.py"
А в графе formgrader "No data available in table", значит, вы запустили Jupyter находясь не в корневой папке курса.
4.1 Создание задания
4.1.1 С помощью Formgrader
Здесь все просто: нажимаете +add assigment.
В таблице formgrader появится имя задания, в эту папку нужно поместить ноутбуки с задачами (их может быть несколько)
(Зайти в папку можно кликнув на имя)
4.1.2 Командная строка
Все задания, созданные вами, но еще не опубликованные, хранятся в папке курса в разделе source, поэтому для добавления задания с названием assigment_id можно просто создать папку course_id/source/assigment_id и в нее помеситить задачи. 
4.2 Добавление тестов
Для того, чтобы сделать задачи удобоваримыми для nbgrader, нужно добавить тесты и ответы к ним.
!Важно! nbgrader прячет от студентов решения и тесты, если использовать соответствующие бракеты. Все бракеты и их содержимое будут скрыты от студента и заменены на фразы типа "Введите решение".
В ноутбуке с заданием нужно нажать View -> Cell Toolbar: откроются все возможности nbgrader. Нажмите Create Assigment. В правом углу каждой ячейки появится окошко с выбором вида этой ячейки, а после выбора появится id этой ячейки (по этим id nbgrader будет ориентироваться при проверке и прятать нужные ячейки от студентов при релизе). Слева от id появится ячейка с количеством баллов за задание. Ячейки, подсвечивающиеся синим, не будут доступны студентам в своем первоначальном виде.
4.2.1 Read only
Обычный комментарий. Отличается от ячейки markdown тем, что является неизменяемым для студента. В formgrader это отмечено знаком замка в левом углу ячейки.
Важно! В зависимости от версии nbgrader, функционал таких ячеек изменяется. На текущей версии, если я правильно поняла, все работает так:
При генерации задания содержимое ячейки записывается в базу данных. Во время проверки nbgrader заменяет содержимое этой ячейки в файле студента на то, что было сохранено в базе данных на момент релиза. То есть например, вариант удалить ячейку с тестами и получит 100% не прокатит, nbgrader восстановит ячейку и проверит код. Именно поэтому тесты и решения пишутся в разных ячейках: тесты Read-only. (об этом в 4.2.5)
4.2.2 Manually graded task
Задания, требующие индивидуальнной проверки учителем каждого ученика и нескольких ячеек, например "приведите графики, придумайте тесты, хорошо показывающие недостатки модели". В самой ячейке вводится только текст задания, ученик (наверное?) создаст новые ячейки, в которых выполнит задание.
Для этого типа ячеек можно добавить решение в бракетах === BEGIN MARK SCHEME === ... === END MARK SCHEME ===,
например, для облегчения работы ассистентам. Эта часть будет скрыта от студента.
4.2.3 Manually graded answer
Задания, требующие индивидуальнной проверки учителем каждого ученика, например "объясните эффект" или "напишите формулу". Выполняются в той же ячейке.
!Важно. Сам текст задания нужно писать в другой ячейке, вида Read only, так как содержимое Manually graded answer ячеек nbgrader заменит на фразу YOUR ANSWER HERE в версии студента.
4.2.4 Autograded answer
Доступны только для ячеек с кодом. В бракетах ### BEGIN SOLUTION ... ### END SOLUTION нужно написать решение. 
Если написать решение, но не использовать бракеты, nbgrader скроет от студента все содержимое ячейки, но исключения не выдаст. Баллы за эту ячейку не выставляются, так как критерием являются тесты. 
4.2.5 Autograder tests
Доступны только для ячеек с кодом. Необходимо ипользовать функции типа numpy.allclose или похожие. Если все тесты проходят, студент получает число баллов в ячейке. Хотя бы 1 тест падает -- 0 баллов за задание.
Если вы хотите чтобы тесты были скрыты от студента, можно использовать бракеты ### BEGIN HIDDEN TESTS и ### END HIDDEN TESTS.
!Проблема На моем тесте nbgrader при проверке просто проигнорировал скрытые тесты и оуенил работу на макс.балл, но я с этим разберусь.
Важно!
Эта функция Особенно важна для тестирующих ячеек, которые всегда помечены как read-only. Из-за того что механизм автопровеки выставляет студенту максимальный балл в случае прохождения всех тестов, простым способом обойти это было бы просто удалить или закомментировать тесты.
Эта особенность ячеек read-only проигнорирует все изменения, сделанные студентом.
4.3 Проверка
4.3.1 Formgrader
Чтобы проверить адекватность тестов, достаточно нажать кнопку Validatе на панели Jupyter сверху. Nbgrader запустит ячейки, и в случае, если ваше решение успешно обработает все тесты, выдаст:
"Success! Your notebook passes all the tests."
В противном случае вы увидите на экране "обвалившиеся" ячейки.
4.3.2 Командная строка
Для командной строки существует команда nbgrader validate assignment_id. Однако чтобы проверить нужный ноутбук, нужно указать его адрес относительно корневой папки курса.
nbgrader validate source/assigment_id/problem_id.ipynb
4.4 Generate
Создает "цензурную" версию для релиза (ту, которую увидит студент), убирая ответы и скрытые тесты.
4.4.1 Formgrader
Чтобы сгенерировать задание, надо перейти во вкладку formgrader и нажать на значок шапки в графе generate напротив соответствующего задания. Вы увидите окно log output(вывода журнала?).
!Возможная проблема
В папке source должен лежать файл header.ipynb; если его там нет, его нужно скачать и вставить, файл прикреплю. По смыслу это шапка, в которой студент напишет информацию о себе, без нее будет выдаваться странная ошибка.
Для того чтобы увидеть версию для релиза, можно нажать на значок лупы в строчке с соответствующим заданием во вкдадке formgrader.
4.4.2 Командная строка
Для командной строки существует функция nbgrader generate assignment_id.
Перед использованием команды убедитесь, что нужный ноутбук лежит по адресу 
{course_directory}/source/{assignment_id}/{notebook_id}.ipynb
!id студента не указано и так и должно быть в соответствии со структурой папки.
Сгенерированное задание будет лежать по адресу
{course_directory}/release/{assignment_id}/{notebook_id}.ipynb
В результате папки source и release будут аналогичны по структуре, только в первой будут лежать ноутбуки преподавателя, с решениями и тестами, а во второй -- те же файлы, но зацензурированные, для учеников.
Если вы хотите проверить через командную строку, что ваши действительно спрятаны в версии для студента, можно использовать команду
nbgrader validate --invert release/{assignment_id}/{notebook_id}.ipynb
Если все хорошо, то есть файл на месте, и все тесты обвалились, вывод будет следующим:
"Success! The notebook does not pass any tests."
4.5 Публикация
Релиз происходит так: по адресу(про него в 4.5.0) nbgrader создает папку с названием курса(папку для обмена), а в ней две директории: outbond для релиза и inbond для сбора(о ней в разделе 4.6). То есть результат действия "публикация задания" это перемещение ноутбуков, соответствующих этому заданию в папку outbond из папки {course_directory}/release.
Папка outbond по организации и содержанию выглядит точно так же, как и release в папке курса, однако находится не в папке курса. (По факту папка курса должна быть доступна только учителю, а outbond расшарена ученикам).
4.5.0 Проблемы реализации
Для релиза и сбора заданий создатели nbgrader настойчиво советуют JupyterHub, но я в нем пока не разобралась.
В случае, если мы не используем сервера, в файле get_config.py можно вписать адрес папки для обмена между студентами и преподавателем:
%%file nbgrader_config.py

c = get_config()

c.CourseDirectory.course_id = "example_course"
c.Exchange.root = "/tmp/exchange" например
В последней строке вписываем путь к папке обмена, которая уже должна существовать и все пользователи дожны иметь право изменять/удалять/создавать файлы.
Кнопка release во вкладке formgrader перемещает ноутбуки по этому адресу. Если ничего не указывать, адрес папки обмена: /srv/nbgrader/exchange/TestCourse/outbound/.
4.5.1 Formgrader
Тут снова все просто: в вкладке formgrader нужно нажать на значок в виде облака для релиза, и на крестик для того, чтобы релиз отменить. 
! Возможная проблема
Если вы поменяли адрес папки обмена, но релиз произошел по старому адресу, перезапустите ядро Jupyter.
4.5.2 Командная строка
Команда nbgrader release assignment_id выполняет релиз по адресу, указанному в файле get_config.py.
4.7 Сбор(если у студента не установлен nbgrader)
Такого не предполагает функционал, поэтому часть автоматических действий перекладывается на учителя.
В папке {exchange_directory}/{course_id}/inbond/ должны лежать папки студентов со структурой/{student_id+assignment_id+timestamp}/*.ipynb
Пример: /tmp/exchange/TestCourse/inbound/vivanov+quadratic+2020-04-18 17:50:45.884871 UTC/quadratic_exercise.ipynb
Я пока не нашла способа избежать такой сложной структуры, так как она создается nbgrader, когда студенты отсылают свои решения. Возможно он есть. Если изменить имя папки, функция collect работать не будет.
4.7.1 Formgrader
Здесь все снова просто: во вкладке formgrader в столбике #submissions будет указано количество решений. Для того, чтобы их "забрать", надо нажать на облачко в графе collect.
4.7.2 Командная строка
4.8 Проверка
4.8.1 Автопроверка
Для автопроверки нужно нажать на количество сданных решений,а затем на значок молнии. nbgrader выставит баллы за каждое автоматически проверенное задание и изменит статус ассигмента. 
4.8.2 Вручную
Если есть задания, требующие проверки вручную, вам об этом напомнит статус задания. Чтобы выполнить проверку, нужно выбрать вкладку Manual Grading слева в форме formgrader. Далее нажать на задание, затем на ноутбук,и щелкнуть на первую работу из сданных. Откоется окно, в котором около кажно из ячеек можно выбрать количество ббаллов, в том числе изменить оценку, выставленную nbgrader автоматически. Сверху есть две вкладки ← Prev и Next → , с помощью которых можно переключаться между ноутбуками учеников.
4.9 Feedback
С формированием фидбэка все просто: после проверки задания во вкладке formgrader нужно нажать на значок письма во вкладке Generate Feedback. В корневой папке, по адресу /feedback/{student_id}/{assignment_id}/ будет лежать фидбэк в формате .html
А вот с отправкой фидбэка есть проблемы. Из-за отсутствия таймстэмпов(см) nbgrader отказывается перемещать файлы в обменную папку. Пока что есть два варианта решения: либо руками копировать папку фидбэк в обменную папку (а точнее exchange/{course_id}/feedback), либо создавать таймстэмпы вручную, но я пока не знаю, как)
5. Работа с базой данных
5.1 Студенты
Проверить список студентов можно с помощью команды  nbgrader db student list в командной строке.
Существует несколько способов добавить в класс студента:
5.1.1 nbgrader_config.py
В файле nbgrader_config.py написать
c.CourseDirectory.db_students = [
    dict(id="vivanov", first_name="Vovochka", last_name="Ivanov"),
]
!Проблема По каким-то причинам, nbgrader не чувствует изменений этого параметра. Ошибку также не выдает.
5.1.2 Скрипт
С помощью командной строки можно импортировать файл формата csv со списком студентов.
5.1.3 Командная строка
rm gradebook.db # remove the existing database, to start fresh
!Также nbgrader поддерживает импорт файлов csv со списком учеников и их id.
nbgrader db student add vivanov --last-name=Ivanov --first-name=Vovochka #add student's id, name and surname
Значение айди может содержать числа и буквы.
nbgrader db student list #to see exist sudent's list
Этот метод работает, но файл nbgrader_config.py не меняется.
Удалить студента можно с помощью командной строки: nbgrader db student remove vivanov.
6.Сторона студента(Только еслии у них nbgrader стоит)
Чтобы студенты ничего не поломали, у наих должна стоять 3 и выше версия питона и дж.
Чтобы обрабатывать эту ошибку, создатели nbgrader советуют добавлять в каждый ноутбук ячейку
import IPython
assert IPython.version_info[0] >= 3, "Your version of IPython is too old, please update it."